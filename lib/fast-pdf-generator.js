// Fast PDF Generator using jsPDF directly (much faster than html2pdf)
// This bypasses HTML rendering and generates PDF programmatically

export async function generateJournalPDFFast(journalEntry, sessionId) {
  try {
    // Dynamically import jsPDF (lighter than html2pdf)
    const { jsPDF } = await import('jspdf');
    
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'in',
      format: 'letter',
      compress: true
    });

    // Page margins and dimensions
    const margin = 0.75;
    const pageWidth = 8.5;
    const pageHeight = 11;
    const contentWidth = pageWidth - (margin * 2);
    let yPos = margin;

    // Helper function to add text with automatic page breaks
    function addText(text, fontSize = 12, fontStyle = 'normal', color = '#000000') {
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', fontStyle);
      doc.setTextColor(color);
      
      const lines = doc.splitTextToSize(text, contentWidth);
      
      for (const line of lines) {
        if (yPos > pageHeight - margin - 0.5) { // Near bottom of page
          doc.addPage();
          yPos = margin;
        }
        doc.text(line, margin, yPos);
        yPos += fontSize / 72 * 1.2; // Line height calculation
      }
      yPos += 0.1; // Small gap after text block
    }

    function addSeparator() {
      if (yPos > pageHeight - margin - 0.3) {
        doc.addPage();
        yPos = margin;
      }
      doc.setDrawColor('#7c3aed');
      doc.line(margin, yPos, pageWidth - margin, yPos);
      yPos += 0.2;
    }

    // Title
    addText(journalEntry.title, 20, 'bold', '#7c3aed');
    yPos += 0.1;
    
    // Subtitle
    addText(`Raven Calder Journal Entry • ${journalEntry.metadata.sessionDate}`, 11, 'italic', '#666666');
    yPos += 0.2;
    
    addSeparator();
    
    // Main content (faster paragraph processing)
    const paragraphs = journalEntry.narrative.split('\n').filter(p => p.trim());
    for (const paragraph of paragraphs) {
      addText(paragraph.trim(), 11);
      yPos += 0.1; // Paragraph spacing
    }
    
    yPos += 0.3;
    addSeparator();
    
    // Session Analytics Header
    addText('Session Analytics', 14, 'bold', '#7c3aed');
    yPos += 0.1;
    
    // Analytics data (compact format)
    const analytics = [
      `Total Interactions: ${journalEntry.metadata.totalInteractions}`,
      `Session Date: ${journalEntry.metadata.sessionDate}`,
      `Resonance Fidelity: ${journalEntry.metadata.resonanceFidelity}%`,
      `Session ID: ${sessionId.slice(-8)}`
    ];
    
    for (const item of analytics) {
      addText(item, 10);
    }
    
    // Primary patterns (if available)
    if (journalEntry.metadata.primaryPatterns?.length > 0) {
      yPos += 0.2;
      addText('Primary Communication Patterns:', 10, 'bold');
      const patterns = journalEntry.metadata.primaryPatterns.join(' • ');
      addText(patterns, 9);
    }
    
    // Footer
    yPos += 0.3;
    addSeparator();
    addText('Generated by Raven Calder • Woven Web Application', 9, 'normal', '#666666');
    addText('"Here\'s what resonated, here\'s what didn\'t, here\'s what pattern Raven is tentatively guessing — but you remain the validator."', 8, 'italic', '#666666');

    // Generate and download (much faster than html2canvas approach)
    const filename = `raven-journal-${sessionId.slice(-8)}-${new Date().toISOString().slice(0,10)}.pdf`;
    doc.save(filename);
    
    return { success: true, message: 'PDF generated successfully!' };
    
  } catch (error) {
    return { 
      success: false, 
      message: 'PDF generation failed: ' + (error.message || 'Unknown error'),
      error 
    };
  }
}

// Alternative: Generate simple text-based PDF for maximum speed
export async function generateJournalPDFUltraFast(journalEntry, sessionId) {
  try {
    const { jsPDF } = await import('jspdf');
    
    const doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true
    });

    // Simple, fast text layout
    let y = 20;
    const lineHeight = 7;
    const margin = 20;
    const pageWidth = 210 - (margin * 2);
    
    // Title
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(journalEntry.title, margin, y);
    y += lineHeight * 2;
    
    // Date
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(journalEntry.metadata.sessionDate, margin, y);
    y += lineHeight * 2;
    
    // Content (minimal formatting for speed)
    doc.setFontSize(11);
    const contentLines = doc.splitTextToSize(journalEntry.narrative, pageWidth);
    
    for (const line of contentLines) {
      if (y > 280) { // Near page bottom
        doc.addPage();
        y = 20;
      }
      doc.text(line, margin, y);
      y += lineHeight;
    }
    
    // Simple analytics
    y += lineHeight;
    doc.setFontSize(10);
    doc.text(`Interactions: ${journalEntry.metadata.totalInteractions} | Fidelity: ${journalEntry.metadata.resonanceFidelity}%`, margin, y);
    
    const filename = `raven-journal-fast-${sessionId.slice(-8)}.pdf`;
    doc.save(filename);
    
    return { success: true, message: 'Ultra-fast PDF generated!' };
    
  } catch (error) {
    return { 
      success: false, 
      message: 'Ultra-fast PDF generation failed: ' + (error.message || 'Unknown error'),
      error 
    };
  }
}